// Generated by gencpp from file dji_sdk/A3RTK.msg
// DO NOT EDIT!


#ifndef DJI_SDK_MESSAGE_A3RTK_H
#define DJI_SDK_MESSAGE_A3RTK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_sdk
{
template <class ContainerAllocator>
struct A3RTK_
{
  typedef A3RTK_<ContainerAllocator> Type;

  A3RTK_()
    : date(0)
    , time(0)
    , longitude_RTK(0.0)
    , latitude_RTK(0.0)
    , height_above_sea_RTK(0.0)
    , longitude_single(0)
    , latitude_single(0)
    , height_above_sea_single(0)
    , velocity_north(0.0)
    , velocity_east(0.0)
    , velocity_ground(0.0)
    , yaw(0)
    , satellite_used_RTK(0)
    , satellite_used_single(0)
    , horizontal_dop(0.0)
    , position_dop(0.0)
    , position_flag()
    , gps_state(0)
    , rtk_updated_flag(0)  {
      position_flag.assign(0);
  }
  A3RTK_(const ContainerAllocator& _alloc)
    : date(0)
    , time(0)
    , longitude_RTK(0.0)
    , latitude_RTK(0.0)
    , height_above_sea_RTK(0.0)
    , longitude_single(0)
    , latitude_single(0)
    , height_above_sea_single(0)
    , velocity_north(0.0)
    , velocity_east(0.0)
    , velocity_ground(0.0)
    , yaw(0)
    , satellite_used_RTK(0)
    , satellite_used_single(0)
    , horizontal_dop(0.0)
    , position_dop(0.0)
    , position_flag()
    , gps_state(0)
    , rtk_updated_flag(0)  {
  (void)_alloc;
      position_flag.assign(0);
  }



   typedef uint32_t _date_type;
  _date_type date;

   typedef uint32_t _time_type;
  _time_type time;

   typedef double _longitude_RTK_type;
  _longitude_RTK_type longitude_RTK;

   typedef double _latitude_RTK_type;
  _latitude_RTK_type latitude_RTK;

   typedef float _height_above_sea_RTK_type;
  _height_above_sea_RTK_type height_above_sea_RTK;

   typedef int32_t _longitude_single_type;
  _longitude_single_type longitude_single;

   typedef int32_t _latitude_single_type;
  _latitude_single_type latitude_single;

   typedef int32_t _height_above_sea_single_type;
  _height_above_sea_single_type height_above_sea_single;

   typedef float _velocity_north_type;
  _velocity_north_type velocity_north;

   typedef float _velocity_east_type;
  _velocity_east_type velocity_east;

   typedef float _velocity_ground_type;
  _velocity_ground_type velocity_ground;

   typedef int16_t _yaw_type;
  _yaw_type yaw;

   typedef uint8_t _satellite_used_RTK_type;
  _satellite_used_RTK_type satellite_used_RTK;

   typedef uint8_t _satellite_used_single_type;
  _satellite_used_single_type satellite_used_single;

   typedef float _horizontal_dop_type;
  _horizontal_dop_type horizontal_dop;

   typedef float _position_dop_type;
  _position_dop_type position_dop;

   typedef boost::array<uint8_t, 6>  _position_flag_type;
  _position_flag_type position_flag;

   typedef uint16_t _gps_state_type;
  _gps_state_type gps_state;

   typedef uint16_t _rtk_updated_flag_type;
  _rtk_updated_flag_type rtk_updated_flag;




  typedef boost::shared_ptr< ::dji_sdk::A3RTK_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_sdk::A3RTK_<ContainerAllocator> const> ConstPtr;

}; // struct A3RTK_

typedef ::dji_sdk::A3RTK_<std::allocator<void> > A3RTK;

typedef boost::shared_ptr< ::dji_sdk::A3RTK > A3RTKPtr;
typedef boost::shared_ptr< ::dji_sdk::A3RTK const> A3RTKConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_sdk::A3RTK_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_sdk::A3RTK_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dji_sdk

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'dji_sdk': ['/root/Documents/roswork/DJIChallenge2016_new/src/dji_sdk/msg', '/root/Documents/roswork/DJIChallenge2016_new/src/build/devel/share/dji_sdk/msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dji_sdk::A3RTK_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_sdk::A3RTK_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_sdk::A3RTK_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_sdk::A3RTK_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_sdk::A3RTK_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_sdk::A3RTK_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_sdk::A3RTK_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5767e522bb89a710642f4bf98407bfa5";
  }

  static const char* value(const ::dji_sdk::A3RTK_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5767e522bb89a710ULL;
  static const uint64_t static_value2 = 0x642f4bf98407bfa5ULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_sdk::A3RTK_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_sdk/A3RTK";
  }

  static const char* value(const ::dji_sdk::A3RTK_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_sdk::A3RTK_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 date\n\
uint32 time\n\
float64 longitude_RTK\n\
float64 latitude_RTK\n\
float32 height_above_sea_RTK\n\
int32 longitude_single\n\
int32 latitude_single\n\
int32 height_above_sea_single\n\
float32 velocity_north\n\
float32 velocity_east\n\
float32 velocity_ground\n\
int16 yaw #between baseline and south\n\
uint8 satellite_used_RTK\n\
uint8 satellite_used_single\n\
float32 horizontal_dop\n\
float32 position_dop\n\
uint8[6] position_flag #0 sigle point, 1 RTK, 2 fixed direction, 3 reserve\n\
uint16 gps_state\n\
uint16 rtk_updated_flag\n\
";
  }

  static const char* value(const ::dji_sdk::A3RTK_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_sdk::A3RTK_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.date);
      stream.next(m.time);
      stream.next(m.longitude_RTK);
      stream.next(m.latitude_RTK);
      stream.next(m.height_above_sea_RTK);
      stream.next(m.longitude_single);
      stream.next(m.latitude_single);
      stream.next(m.height_above_sea_single);
      stream.next(m.velocity_north);
      stream.next(m.velocity_east);
      stream.next(m.velocity_ground);
      stream.next(m.yaw);
      stream.next(m.satellite_used_RTK);
      stream.next(m.satellite_used_single);
      stream.next(m.horizontal_dop);
      stream.next(m.position_dop);
      stream.next(m.position_flag);
      stream.next(m.gps_state);
      stream.next(m.rtk_updated_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct A3RTK_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_sdk::A3RTK_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_sdk::A3RTK_<ContainerAllocator>& v)
  {
    s << indent << "date: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.date);
    s << indent << "time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time);
    s << indent << "longitude_RTK: ";
    Printer<double>::stream(s, indent + "  ", v.longitude_RTK);
    s << indent << "latitude_RTK: ";
    Printer<double>::stream(s, indent + "  ", v.latitude_RTK);
    s << indent << "height_above_sea_RTK: ";
    Printer<float>::stream(s, indent + "  ", v.height_above_sea_RTK);
    s << indent << "longitude_single: ";
    Printer<int32_t>::stream(s, indent + "  ", v.longitude_single);
    s << indent << "latitude_single: ";
    Printer<int32_t>::stream(s, indent + "  ", v.latitude_single);
    s << indent << "height_above_sea_single: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height_above_sea_single);
    s << indent << "velocity_north: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_north);
    s << indent << "velocity_east: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_east);
    s << indent << "velocity_ground: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_ground);
    s << indent << "yaw: ";
    Printer<int16_t>::stream(s, indent + "  ", v.yaw);
    s << indent << "satellite_used_RTK: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.satellite_used_RTK);
    s << indent << "satellite_used_single: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.satellite_used_single);
    s << indent << "horizontal_dop: ";
    Printer<float>::stream(s, indent + "  ", v.horizontal_dop);
    s << indent << "position_dop: ";
    Printer<float>::stream(s, indent + "  ", v.position_dop);
    s << indent << "position_flag[]" << std::endl;
    for (size_t i = 0; i < v.position_flag.size(); ++i)
    {
      s << indent << "  position_flag[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.position_flag[i]);
    }
    s << indent << "gps_state: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gps_state);
    s << indent << "rtk_updated_flag: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rtk_updated_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_SDK_MESSAGE_A3RTK_H
