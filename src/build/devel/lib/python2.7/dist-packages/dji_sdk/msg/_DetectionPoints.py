# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_sdk/DetectionPoints.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DetectionPoints(genpy.Message):
  _md5sum = "196b479291a9eb57a8d0fe6889c4194d"
  _type = "dji_sdk/DetectionPoints"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 x0
int32 y0
int32 x1
int32 y1
int32 x2
int32 y2
int32 x3
int32 y3
int32 x4
int32 y4
int32 id"""
  __slots__ = ['x0','y0','x1','y1','x2','y2','x3','y3','x4','y4','id']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x0,y0,x1,y1,x2,y2,x3,y3,x4,y4,id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectionPoints, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x0 is None:
        self.x0 = 0
      if self.y0 is None:
        self.y0 = 0
      if self.x1 is None:
        self.x1 = 0
      if self.y1 is None:
        self.y1 = 0
      if self.x2 is None:
        self.x2 = 0
      if self.y2 is None:
        self.y2 = 0
      if self.x3 is None:
        self.x3 = 0
      if self.y3 is None:
        self.y3 = 0
      if self.x4 is None:
        self.x4 = 0
      if self.y4 is None:
        self.y4 = 0
      if self.id is None:
        self.id = 0
    else:
      self.x0 = 0
      self.y0 = 0
      self.x1 = 0
      self.y1 = 0
      self.x2 = 0
      self.y2 = 0
      self.x3 = 0
      self.y3 = 0
      self.x4 = 0
      self.y4 = 0
      self.id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_11i.pack(_x.x0, _x.y0, _x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3, _x.x4, _x.y4, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.x0, _x.y0, _x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3, _x.x4, _x.y4, _x.id,) = _struct_11i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_11i.pack(_x.x0, _x.y0, _x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3, _x.x4, _x.y4, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.x0, _x.y0, _x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3, _x.x4, _x.y4, _x.id,) = _struct_11i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_11i = struct.Struct("<11i")
